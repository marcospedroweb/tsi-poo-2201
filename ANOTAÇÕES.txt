POO
  Principios
    - Single Reponsability [G]eneral
    - Open-close [R]esponsability: Codigo deve ser expansível
    - Liskov [A]ssignment
    - Interface segregation [S]oftware: Evitar interfaces com muitas coisas paralelas
    - Dependency inversion [P]rinciples: Criação de codigos que podem ser substituidos dependendo do contexto

    SOLID
      Single Reponsability
        Uma classe é responsavel por apenas 1 assunto. Ex: Classe clientes, só meche com os dados do clientes

      Open-close
        O codigo deve ser expansível, apto para receber novos comportamento e recursos sem alterar o codigo fonte.

      Liskov
        A classe derivada deve ser substituível por sua classe mãe

      Interface segregation
        Buscar criar criação de interfaces especificas ao inves de interfaces genericas

      Dependency inversion
        Abstrações não deve depender de detalhes, os detalhes que devem depender de Abstrações. Ex: instanciar uma classe dentro da outra

    GRASP
      Controller
        Exige um controller para receer e coordenar (controla) a operação do sistemas

      Creator ou factory
        Uma classe que cria os objetos e/ou instancia estes objetos

      Indirection
        Semelhante ao padrão MVC com controller, model e view. Fazendo isso, garante que o acoplamento entre eles permaneça baixo, ou seja, se der problema em um, não dá problema em outro

      Information Expert
        Uma abordagem para atribuir responsabilidades, determinar responsabilidade, informações necessarias para cumpri-las e determinar onde essas informações são amazenadas

      High Cohesion
        Coesão alta quer dizer que as responsabilidades de um elemento estão fortemente relacionadas e altamente focadas

      Low Coupling
        Menor dependencia entre as classes

      Polymorphism
        Fornecimento de interface unica para diferentes entidadades. Ao utilizar interface, estamos fazendo polimorfismo 

      Protected Variations
        Protege elementos de variações de outros elementos. Envolvendo foco da instabilidade em uma interface e criando varias implementações de uma interface

      Pure Fabrication
        Um classe não representa um conceito no dominio do problema. Isso para criar baixo acoplamento.

      

